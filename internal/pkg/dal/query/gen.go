// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Project      *project
	ProjectUser  *projectUser
	Task         *task
	TaskResponse *taskResponse
	Team         *team
	TeamPlace    *teamPlace
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Project = &Q.Project
	ProjectUser = &Q.ProjectUser
	Task = &Q.Task
	TaskResponse = &Q.TaskResponse
	Team = &Q.Team
	TeamPlace = &Q.TeamPlace
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Project:      newProject(db, opts...),
		ProjectUser:  newProjectUser(db, opts...),
		Task:         newTask(db, opts...),
		TaskResponse: newTaskResponse(db, opts...),
		Team:         newTeam(db, opts...),
		TeamPlace:    newTeamPlace(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Project      project
	ProjectUser  projectUser
	Task         task
	TaskResponse taskResponse
	Team         team
	TeamPlace    teamPlace
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Project:      q.Project.clone(db),
		ProjectUser:  q.ProjectUser.clone(db),
		Task:         q.Task.clone(db),
		TaskResponse: q.TaskResponse.clone(db),
		Team:         q.Team.clone(db),
		TeamPlace:    q.TeamPlace.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Project:      q.Project.replaceDB(db),
		ProjectUser:  q.ProjectUser.replaceDB(db),
		Task:         q.Task.replaceDB(db),
		TaskResponse: q.TaskResponse.replaceDB(db),
		Team:         q.Team.replaceDB(db),
		TeamPlace:    q.TeamPlace.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Project      IProjectDo
	ProjectUser  IProjectUserDo
	Task         ITaskDo
	TaskResponse ITaskResponseDo
	Team         ITeamDo
	TeamPlace    ITeamPlaceDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Project:      q.Project.WithContext(ctx),
		ProjectUser:  q.ProjectUser.WithContext(ctx),
		Task:         q.Task.WithContext(ctx),
		TaskResponse: q.TaskResponse.WithContext(ctx),
		Team:         q.Team.WithContext(ctx),
		TeamPlace:    q.TeamPlace.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
